# -*- coding: utf-8 -*-
"""Cosmetics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tLtgKYE8k-uf_eK5RvS3cwNw3TxmLaoe
"""

import pandas as pd
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.manifold import TSNE
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

data = pd.read_csv('cosmetics.csv')

# One-Hot Encoding for Label
encoder = OneHotEncoder(sparse=False)
encoded_labels = encoder.fit_transform(data[['Label']])

# Convert to DataFrame and concatenate
encoded_labels_df = pd.DataFrame(encoded_labels, columns=encoder.get_feature_names_out(['Label']))
data = pd.concat([data, encoded_labels_df], axis=1)
data.drop(columns=['Label'], inplace=True)  # Drop 'Label' column after encoding

# One-Hot Encoding for Ingredients
ingredients_encoded = data['Ingredients'].str.get_dummies(sep=',')
data = pd.concat([data, ingredients_encoded], axis=1)
data.drop(columns=['Ingredients'], inplace=True)  # Drop 'Ingredients' column after encoding

# Normalize Price and Rank
scaler = StandardScaler()
data[['Price', 'Rank']] = scaler.fit_transform(data[['Price', 'Rank']])

# Select features for t-SNE (excluding 'Name' and 'Brand' for the t-SNE process)
features_for_tsne = data.drop(columns=['Name', 'Brand'])

# Retain the 'Name' column for reference after applying t-SNE
product_names = data['Name']

# Initialize t-SNE with 2 components for 2D visualization
tsne = TSNE(n_components=2, random_state=42)

# Fit and transform the data
tsne_results = tsne.fit_transform(features_for_tsne)

# Create a DataFrame with the t-SNE results
tsne_df = pd.DataFrame(tsne_results, columns=['TSNE1', 'TSNE2'])

# Add back the 'Name' column to the t-SNE results DataFrame
tsne_df['Name'] = product_names.values

# Optionally, add back the 'Brand' column for reference if needed
tsne_df['Brand'] = data['Brand'].values

# View the first few rows of the t-SNE result DataFrame
print(tsne_df.head())

# Assuming 'expensive_product_name' is the name of the expensive product you are interested in
expensive_product_name = 'Brightening Cleanser'

# Identify the index of the expensive product in the t-SNE DataFrame
expensive_product_index = tsne_df[tsne_df['Name'] == expensive_product_name].index[0]

# Retrieve the t-SNE coordinates of the expensive product
expensive_product_tsne_coords = tsne_df.loc[expensive_product_index, ['TSNE1', 'TSNE2']]

# Print the t-SNE coordinates of the expensive product for verification
print(f"t-SNE coordinates of '{expensive_product_name}': {expensive_product_tsne_coords.values}")

# Assume you have already loaded your data and applied necessary preprocessing

# Step 1: Take user input for the expensive product name and skin type
expensive_product_name = input("Enter the name of the expensive product: ")
skin_type = input("Enter your skin type (Combination, Dry, Normal, Oily, Sensitive): ")

# Step 2: Check if the expensive product is in the DataFrame
if expensive_product_name in tsne_df['Name'].values:
    # Identify the t-SNE coordinates of the expensive product
    expensive_product_index = tsne_df[tsne_df['Name'] == expensive_product_name].index[0]
    expensive_product_tsne_coords = tsne_df.loc[expensive_product_index, ['TSNE1', 'TSNE2']]

    # Calculate distances from the expensive product to all other products
    tsne_df['distance'] = np.sqrt((tsne_df['TSNE1'] - expensive_product_tsne_coords['TSNE1'])**2 +
                                   (tsne_df['TSNE2'] - expensive_product_tsne_coords['TSNE2'])**2)

    # Merge t-SNE DataFrame with original data to get prices and skin types
    similar_products_df = tsne_df[tsne_df['Name'] != expensive_product_name]
    similar_products_df = similar_products_df.merge(data[['Name', 'Price', skin_type]], on='Name')

    # Filter by skin type
    skin_type_filter = similar_products_df[skin_type] == 1
    filtered_similar_products = similar_products_df[skin_type_filter]

    # Filter out products that are more expensive than the expensive product
    expensive_product_price = data[data['Name'] == expensive_product_name]['Price'].values[0]
    filtered_similar_products = filtered_similar_products[filtered_similar_products['Price'] < expensive_product_price]

    # Sort by distance and price
    cheaper_alternatives = filtered_similar_products.sort_values(by=['distance', 'Price'])

    # Display the cheapest alternative
    if not cheaper_alternatives.empty:
        cheapest_alternative = cheaper_alternatives.iloc[0]
        print(f"Cheapest alternative to '{expensive_product_name}' is '{cheapest_alternative['Name']}' with a price of {cheapest_alternative['Price']}.")
    else:
        print(f"No suitable alternative found for '{expensive_product_name}' that matches the criteria.")
else:
    print(f"Product '{expensive_product_name}' not found in the t-SNE DataFrame.")

